HTTP :

Методы HTTP запроса :

GET / получение
POST / создание
PUT / редактирование
DELETE / удаление

// -------------------------------

HTTP статус код :

2xx / success
3xx / redirect
4xx / client error
5xx / server error

// -------------------------------------


REST API


REST = стиль архитектуры программного обеспечения

METHOD     server address url       endpoint

POST       http://server.com        /users      C = create
GET        http://server.com        /users      R = read
PUT        http://server.com        /users      U = update
DELETE     http://server.com        /users      D = delete


// ---------------------------------------------------------


Слои абстракции

Раздеять логические куски нашего приложения в отдельные модули.
Таким образом получаается слабые связки нашего кода.
Что бы в дальнешейм мы могли переписовать или переделовать наш кода, не затргаивая. Другие части нашего приложения


1) Первый слой: DAL (data access layer) // Слой доступа к данным

В нашем случае за этот доступ можно принять Mongoose/
Потому что все операции к базе данных мы делаем с помощью него /
Если бы мы писали сами это обращение, то нужно было бы выделить это обращение, в отдельный слой


2) Второй слой: Controller  // Работа с клиент-серверной состовляющей (params, body, headers...)
В нем идет работа с клиент сервеной состовляеющий.
Составление запроса, написании логики маршрутизации, работа со строкой ввода


3) Третий слой : Service // Бизнес логика / никак не связана с req/res. Работа с БД и выходными пармаетрами

Это получить, какие то данные из базы данных. Как то с ними поработать, как то высчитать и вернуть 






